Microsoft Windows [Version 10.0.18363.778]
(c) 2019 Microsoft Corporation. All rights reserved.

C:\Users\adria\desktop\cz3003-eduventure>c:/Users/adria/desktop/cz3003-eduventure/venv/Scripts/python.exe c:/Users/adria/desktop/cz3003-eduventure/services/core/dao/tests/tests.py


test_ChallengesDAO.py: starting test...
test_challengeCreate (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ... 
--- check that the number of record added is correct
--- check that object cannot be added to database if already exist
ok
test_challengeRead (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ... 
--- check that function returns the right number of result (= 0)
--- check that function returns the right number of result (= 1)
ok
test_challengeUpdate (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ... 
--- check if value of Topic object has been updated
ok


test_CoursesDAO.py: starting test...
test_courseCreate (services.core.dao.tests.test_CoursesDAO.Test_CoursesDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Course object added is correct
ok
test_courseRead (services.core.dao.tests.test_CoursesDAO.Test_CoursesDAO) ...
--- check that the record retrieved is correct
ok


test_LessonsDAO.py: starting test...
test_getLastLessonID (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that function returns 0 when no record in the table
--- check that function returns 1 when no record in the table
ok
test_lessonCreate (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Lesson object added is correct
ok
test_lessonDelete (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_lessonListRead (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ... 
--- check that function returns the right result (when number of record = 0)
--- check that function returns the right result (when number of record = 1)
ok
test_lessonRead (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that the record retrieved is correct (using col='name')
--- check that the record retrieved is correct (using col='id')
--- check that no record is retrieved (when value of col is unacceptable
ok
test_lessonUpdate (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check if value of Lesson object has been updated
ok


test_ProgressesDAO.py: starting test...
test_progressRead (services.core.dao.tests.test_ProgressesDAO.Test_ProgressesDAO) ...
--- test if result returned is correct
ok


test_QuestionAttemptsDAO.py: starting test...
test_questionAttemptCreate (services.core.dao.tests.test_QuestionAttemptsDAO.Test_QuestionAttemptsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the QuestionAttempt object added is correct
ok
test_questionAttemptListRead (services.core.dao.tests.test_QuestionAttemptsDAO.Test_QuestionAttemptsDAO) ...
--- check that the number of record retrieved is correct (number of record = 0)
--- check that the number of record retrieved is correct (number of record = 1)
--- check that the number of record retrieved is correct (number of record = 2)
--- check that the record retrieved is correct
ok


test_QuizAttemptsDAO.py: starting test...
test_quizAttemptCreate (services.core.dao.tests.test_QuizAttemptsDAO.Test_QuizAttemptsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the QuizAttempt object added is correct
ok
test_quizAttemptListRead (services.core.dao.tests.test_QuizAttemptsDAO.Test_QuizAttemptsDAO) ...
--- check that the number of record retrieved is correct
--- check that the record retrieved is correct
ok


test_RsLessonQuizContainDAO.py: starting test...
test_rsLessonDelete (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_rsLessonQuizContainCreate (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsLessonQuizContainRead (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ... 
--- check that the number of records retrived is correct
--- check that the record retrieved is correct
ok


test_RsStaffCourseTeachDAO.py: starting test...
test_rsStaffCourseTeachCreate (services.core.dao.tests.test_RsStaffCourseTeachDAO.Test_RsStaffCourseTeachDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsStaffCourseTeachRead (services.core.dao.tests.test_RsStaffCourseTeachDAO.Test_RsStaffCourseTeachDAO) ...
--- check the number of record retrived is correct
ok


test_RsStudentCourseEnrolDAO.py: starting test...
test_rsCourseEnrolRead (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ...
--- check the number of record retrived is correct
ok
test_rsStudentCourseEnrolCreate (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ... 
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsStudentCourseEnrolRead (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ...
--- check that the record retrieved is correct
ok


test_StaffsDAO.py: starting test...
test_staffCreate (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Staff object added is correct
ok
test_staffRead (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_staffUpdate (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check if value of Staff object has been updated
ok


test_StatisticsDAO.py: starting test...
test_activityRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct (1)
--- test if result returned is correct (2)
ok
test_courseScoreRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ...
--- test if result returned is correct
ok
test_leaderboardRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ...
--- test if result returned is correct
ok
test_lessonCompletedRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok
test_statRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ...
--- test if result returned is correct
ok
test_studentScoreRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok


test_StudentsDAO.py: starting test...
test_studentCreate (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Student object added is correct
ok
test_studentRead (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_studentUpdate (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check if value of Student object has been updated
ok


test_TopicsDAO.py: starting test...
test_topicCreate (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Topic object added is correct
ok
test_topicDelete (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_topicRead (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that the record retrieved is correct (using col='name')
--- check that the record retrieved is correct (using col='id')
ok
test_topicUpdate (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ... 
--- check if value of Topic object has been updated
ok
test_topiclistRead (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that function returns the right result (when number of record = 0)
--- check that function returns the right result (when number of record = 1)
ok


test_UsersDao.py: starting test...
test_userCreate (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check that the number of record added is correct
--- check that the value(s) of the User object added is correct
ok
test_userRead (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_userUpdate (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check if value of User object has been updated
ok

----------------------------------------------------------------------
Ran 44 tests in 50.451s

OK

C:\Users\adria\desktop\cz3003-eduventure>c:/Users/adria/desktop/cz3003-eduventure/venv/Scripts/activate.bat

(venv) C:\Users\adria\desktop\cz3003-eduventure>c:/Users/adria/desktop/cz3003-eduventure/venv/Scripts/python.exe c:/Users/adria/desktop/cz3003-eduventure/services/core/dao/tests/tests.py


test_ChallengesDAO.py: starting test...
test_challengeCreate (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ...
--- check that the number of record added is correct
--- check that object cannot be added to database if already exist
ok
test_challengeRead (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ...
--- check that function returns the right number of result (= 0)
--- check that function returns the right number of result (= 1)
ok
test_challengeUpdate (services.core.dao.tests.test_ChallengesDAO.Test_ChallengesDAO) ...
--- check if value of Topic object has been updated
ok


test_CoursesDAO.py: starting test...
test_courseCreate (services.core.dao.tests.test_CoursesDAO.Test_CoursesDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Course object added is correct
ok
test_courseRead (services.core.dao.tests.test_CoursesDAO.Test_CoursesDAO) ...
--- check that the record retrieved is correct
ok


test_LessonsDAO.py: starting test...
test_getLastLessonID (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that function returns 0 when no record in the table
--- check that function returns 1 when no record in the table
ok
test_lessonCreate (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Lesson object added is correct
ok
test_lessonDelete (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_lessonListRead (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ... 
--- check that function returns the right result (when number of record = 0)
--- check that function returns the right result (when number of record = 1)
ok
test_lessonRead (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check that the record retrieved is correct (using col='name')
--- check that the record retrieved is correct (using col='id')
--- check that no record is retrieved (when value of col is unacceptable
ok
test_lessonUpdate (services.core.dao.tests.test_LessonsDAO.Test_LessonsDAO) ...
--- check if value of Lesson object has been updated
ok


test_ProgressesDAO.py: starting test...
test_progressRead (services.core.dao.tests.test_ProgressesDAO.Test_ProgressesDAO) ... 
--- test if result returned is correct
ok


test_QuestionAttemptsDAO.py: starting test...
test_questionAttemptCreate (services.core.dao.tests.test_QuestionAttemptsDAO.Test_QuestionAttemptsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the QuestionAttempt object added is correct
ok
test_questionAttemptListRead (services.core.dao.tests.test_QuestionAttemptsDAO.Test_QuestionAttemptsDAO) ...
--- check that the number of record retrieved is correct (number of record = 0)
--- check that the number of record retrieved is correct (number of record = 1)
--- check that the number of record retrieved is correct (number of record = 2)
--- check that the record retrieved is correct
ok


test_QuizAttemptsDAO.py: starting test...
test_quizAttemptCreate (services.core.dao.tests.test_QuizAttemptsDAO.Test_QuizAttemptsDAO) ... 
--- check that the number of record added is correct
--- check that the value(s) of the QuizAttempt object added is correct
ok
test_quizAttemptListRead (services.core.dao.tests.test_QuizAttemptsDAO.Test_QuizAttemptsDAO) ...
--- check that the number of record retrieved is correct
--- check that the record retrieved is correct
ok


test_RsLessonQuizContainDAO.py: starting test...
test_rsLessonDelete (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_rsLessonQuizContainCreate (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ... 
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsLessonQuizContainRead (services.core.dao.tests.test_RsLessonQuizContainDAO.Test_RsLessonQuizContainDAO) ...
--- check that the number of records retrived is correct
--- check that the record retrieved is correct
ok


test_RsStaffCourseTeachDAO.py: starting test...
test_rsStaffCourseTeachCreate (services.core.dao.tests.test_RsStaffCourseTeachDAO.Test_RsStaffCourseTeachDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsStaffCourseTeachRead (services.core.dao.tests.test_RsStaffCourseTeachDAO.Test_RsStaffCourseTeachDAO) ...
--- check the number of record retrived is correct
ok


test_RsStudentCourseEnrolDAO.py: starting test...
test_rsCourseEnrolRead (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ...
--- check the number of record retrived is correct
ok
test_rsStudentCourseEnrolCreate (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ... 
--- check that the number of record added is correct
--- check that the value(s) of the relationship object added is correct
ok
test_rsStudentCourseEnrolRead (services.core.dao.tests.test_RsStudentCourseEnrolDAO.Test_RsStudentCourseEnrolDAO) ...
--- check that the record retrieved is correct
ok


test_StaffsDAO.py: starting test...
test_staffCreate (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Staff object added is correct
ok
test_staffRead (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_staffUpdate (services.core.dao.tests.test_StaffsDAO.Test_StaffsDAO) ...
--- check if value of Staff object has been updated
ok


test_StatisticsDAO.py: starting test...
test_activityRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ...
--- test if result returned is correct (1)
--- test if result returned is correct (2)
ok
test_courseScoreRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok
test_leaderboardRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok
test_lessonCompletedRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok
test_statRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ...
--- test if result returned is correct
ok
test_studentScoreRead (services.core.dao.tests.test_StatisticsDAO.Test_StatisticsDAO) ... 
--- test if result returned is correct
ok


test_StudentsDAO.py: starting test...
test_studentCreate (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Student object added is correct
ok
test_studentRead (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_studentUpdate (services.core.dao.tests.test_StudentsDAO.Test_StudentsDAO) ...
--- check if value of Student object has been updated
ok


test_TopicsDAO.py: starting test...
test_topicCreate (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that the number of record added is correct
--- check that the value(s) of the Topic object added is correct
ok
test_topicDelete (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that record has been deleted (-1 number of record in database)
ok
test_topicRead (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that the record retrieved is correct (using col='name')
--- check that the record retrieved is correct (using col='id')
ok
test_topicUpdate (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ... 
--- check if value of Topic object has been updated
ok
test_topiclistRead (services.core.dao.tests.test_TopicsDAO.Test_TopicsDAO) ...
--- check that function returns the right result (when number of record = 0)
--- check that function returns the right result (when number of record = 1)
ok


test_UsersDao.py: starting test...
test_userCreate (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check that the number of record added is correct
--- check that the value(s) of the User object added is correct
ok
test_userRead (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check that the record retrieved is correct (using col='email')
--- check that the record retrieved is correct (using col='id')
ok
test_userUpdate (services.core.dao.tests.test_UsersDao.Test_users_dao) ...
--- check if value of User object has been updated
ok

----------------------------------------------------------------------
Ran 44 tests in 47.876s

OK